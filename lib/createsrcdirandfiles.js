"use strict";/**
 * creating src directories and files
 * @param {*} details
 */const fs=require("fs"),openAppendFile=require("./openandappendfile"),{controllers,userController,services,userService,userModelData,noSequelizeSetupData,sequelizeSetupData,middlewares,userMiddleware,noSequelizeUserModelData,routes,userRouter,routeTest,middlewareTest,useControllerTest,createDb,dropDb,noOrmcreateDb,noOrmDropDb,userQueries,appJs,noOrmUserController,mongoDbSetup,mongoDbUserModelData,responseHelper}=require("./tasks"),createSrcDirAndFiles=a=>{const{appBaseDirectory:b,tests:c,database:d,orm:e}=a,f=["src/controllers","src/services","src/routes","src/config","src/scripts","src/models","src/middlewares","src","src/helpers"];c&&f.push("tests/controllers","tests/middlewares","tests/routes","tests");const g=f// will need to recheck here
.filter(a=>a||a!==void 0).map(a=>`${b}/${a}`);g.forEach(a=>{fs.mkdir(a,{recursive:!0},c=>{if(c)throw c;// Check created files and createstream of the files
const f=fs.createWriteStream(`${a}/index.js`);if([`${b}/src/scripts`].includes(a)&&"mongodb"!==d.toLowerCase())// Create a script to create tables
{const a=fs.createWriteStream(`${b}/src/scripts/createdb.js`),c=fs.createWriteStream(`${b}/src/scripts/dropdb.js`);let d,f;if(e&&"sequelize"===e.toLowerCase())d=createDb,f=dropDb;else if(e&&"no orm"===e.toLowerCase()){d=noOrmcreateDb,f=noOrmDropDb;// Create a script to query database -> only when no orm
const a=fs.createWriteStream(`${b}/src/scripts/queries.js`);openAppendFile(a.path,userQueries)}// append drop database scripts and create db scripts
openAppendFile(a.path,d),openAppendFile(c.path,f)}// Write sequelize instance and create models here
if([`${b}/src/models`].includes(a)){// Set up for sequelize database
const a=fs.createWriteStream(`${b}/src/models/setup.js`),c=a.path,f=fs.createWriteStream(`${b}/src/models/user.js`);e&&("sequelize"===e.toLowerCase()?(openAppendFile(c,sequelizeSetupData(d)),openAppendFile(f.path,userModelData(d))):"no orm"===e.toLowerCase()&&"postgres"===d.toLowerCase()?(openAppendFile(c,noSequelizeSetupData),openAppendFile(f.path,noSequelizeUserModelData)):e&&"mongoose"===e.toLowerCase()&&(openAppendFile(c,mongoDbSetup),openAppendFile(f.path,mongoDbUserModelData)))}// Write to tests files
if([`${b}/tests/controllers`,`${b}/tests/middlewares`,`${b}/tests/routes`].includes(a))switch(a){case`${b}/tests/controllers`:{// Create a tests script for user controllers
const b=fs.createWriteStream(`${a}/user.js`);openAppendFile(b.path,useControllerTest(d))}break;case`${b}/tests/middlewares`:{// Create a tests script for middlewares
const b=fs.createWriteStream(`${a}/index.js`);openAppendFile(b.path,middlewareTest)}break;default:{// Create a tests script for routes
const b=fs.createWriteStream(`${a}/index.js`);openAppendFile(b.path,routeTest)}}// Add data to the main entry point
`${b}/src/index.js`===f.path&&openAppendFile(f.path,appJs(d));// Now create file user.js in specified directories
if([`${b}/src/middlewares`,`${b}/src/routes`,`${b}/src/controllers`,`${b}/src/services`].includes(a)){/**
         * In the base directories create user.js file
         * [For middlewares, routes, controllers]
         */const c=fs.createWriteStream(`${a}/user.js`);`${b}/src/middlewares/user.js`===c.path&&openAppendFile(c.path,userMiddleware),`${b}/src/routes/user.js`===c.path&&openAppendFile(c.path,userRouter),`${b}/src/services/user.js`===c.path&&openAppendFile(c.path,userService(d)),`${b}/src/controllers/user.js`===c.path&&("No ORM"===e?openAppendFile(c.path,noOrmUserController):openAppendFile(c.path,userController(d)))}// Write to different files including the index.js and other files
`${b}/src/middlewares/index.js`===f.path&&openAppendFile(f.path,middlewares),`${b}/src/routes/index.js`===f.path&&openAppendFile(f.path,routes),`${b}/src/controllers/index.js`===f.path&&openAppendFile(f.path,controllers),`${b}/src/services/index.js`===f.path&&openAppendFile(f.path,services),`${b}/src/models/index.js`===f.path&&openAppendFile(f.path,`export { default as User } from './user';`);if([`${b}/src/helpers`].includes(a)){// Create a response helpers file
const a=fs.createWriteStream(`${b}/src/helpers/responsehandler.js`);openAppendFile(a.path,responseHelper)}})})};module.exports=createSrcDirAndFiles;