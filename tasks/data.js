// Package file data.
const packageJson = name => ({
    name: `${name}`,
    version: "1.0.0",
    main: "index.js",
    scripts: {
        start: "babel-node src/index.js",
        test: "nyc --reporter=text mocha --require @babel/register --exit",
        "create:db": "babel-node src/scripts/createdb.js",
        "drop:db": "babel-node src/scripts/dropdb.js"
    }
});

const gitIgnore = `# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# next.js build output
.next

# dist file ignored
dist/`;

const readMe = name =>
    `# ${name.charAt(0).toUpperCase() + name.slice(1)}
This is my first app generated using kemboijs-cli

# Project setup
npm install

# Compile and Run
npm start

# Build application
npm build

# Run your tests
npm test
`;

const babel = `{
    "presets": [
        [
            "@babel/preset-env",
            {
                "targets": {
                    "node": "current"
                }
            }
        ]
    ]
}`;

const appJs = `import express from 'express';
import bodyParser from 'body-parser';
import cors from 'cors';
import routes from './routes';

const port = 8000;
const app = express();

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
    extended: false
}));
app.use(cors());
app.use('/', routes);
app.use('*', (req, res) => {
    res.status(404).send({
        message: "Url not found"
    });
});

app.listen(port, () => {
    console.log("Server connected successfully")
});

export default app;
`;

const userMiddleware = `export default function userMiddleware(req, res, next) {
    next();
}
`;

const middleware = `export {default as UserMiddleware} from './user';`;

const userRouter =
    `import { Router } from 'express';
import { UserController } from '../controllers';
import { UserMiddleware } from '../middlewares';

const router = new Router();

// Create a new user
router.route('/').post(
    UserMiddleware,
    UserController.createUser
);

// Get all users
router.route('/').get(
    UserMiddleware,
    UserController.getUsers
);

// Get single user
router.route('/:id').get(
    UserMiddleware,
    UserController.getUser
);

// Update user details
router.route('/:id').put(
    UserMiddleware,
    UserController.updateUser
);

// Delete a single user
router.route('/:id').delete(
    UserMiddleware,
    UserController.deleteUser
);

router.use((err, req, res, next) => {
    if (err) throw err;
});

export default router;
`;

const routes = `import { Router } from 'express';
import userRouters from './user';

const router = new Router();

// / url
router.get('/', (req, res) => {
    res.status(200).send({
        message: "Welcome to my first app"
    });
});

router.use('/user', userRouters);

export default router;
`;

const appJsTest = `import chai from 'chai';
import chaHttp from 'chai-http';
import app from '../src';

chai.should();
chai.use(chaHttp);

const expect = chai.expect;

describe('Testing app', () => {
    it('return base url', (done) => {
        chai.request(app)
            .get('/')
            .end((err, res) => {
                res.should.have.status(200);
                done();
            });
    });
    it('should return all users', (done) => {
        chai.request(app)
            .get('/user')
            .end((err, res) => {
                expect(err).to.be.null;
                expect(res).to.have.status(200);
                done();
            });
    });
    it('should create a new user', (done) => {
        const userData = {
            firstName: "John",
            lastName: "Doe",
            email: "johndoe@email.com",
            password: "secretpassword"
        }
        chai.request(app)
            .post('/user')
            .send(userData)
            .end((err, res) => {
                expect(err).to.be.null;
                expect(res).to.have.status(201);
                done();
            });
    });
    it('should return a single user', (done) => {
        chai.request(app)
            .get('/user/1')
            .end((err, res) => {
                expect(err).to.be.null
                expect(res).to.have.status(200)
                done();
            });
    });

    it('should update user details', (done) => {
        const userData = {
            firstName: "John1",
            email: "johndoe1@email.com",
            password: "secretpassword"
        }
        chai.request(app)
            .put('/user/1')
            .send(userData)
            .end((err, res) => {
                expect(err).to.be.null;
                expect(res).to.have.status(200);
                done();
            });
    });

    /**
     * Always delete is the last test to be done
     * In the near future, we will work on making sure we have beforeEach and afterEach hooks
     */
    it('should return delete a user', (done) => {
        chai.request(app)
            .delete('/user/1')
            .end((err, res) => {
                expect(err).to.be.null
                expect(res).to.have.status(200)
                done();
            });
    });

    it('should return 404 when route not available', (done) => {
        chai.request(app)
            .get('/notfound')
            .end((err, res) => {
                res.should.have.status(404);
                done();
            });
    });
});    
`;

const noSequelizeSetupData = `import { Pool } from 'pg';
import dotenv from 'dotenv';

dotenv.config();

const env = process.env.NODE_ENV;

const databaseUrl = env === 'test' ? process.env.TEST_DATABASE_URL : process.env.DATABASE_URL

const pool = new Pool({
  connectionString: databaseUrl,
});

export default {
  query(text, params) {
    return new Promise(() => {
      pool.query(text, params);
    });
  },
};`;

const noSequelizeUserModelData = `
export const createTables = async () => {
    const contactTable = \`CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        first_name VARCHAR(128) NOT NULL,
        last_name VARCHAR NOT NULL,
        password VARCHAR NOT NULL,
        created_date TIMESTAMP)\`;
    await pool.query(contactTable);
};
`
const dropDb = `import { User } from '../models';
User.drop(() => {
    console.log('Successfully dropped db')
}).catch(error => {
    console.log("The Error", error);
});
`;
const noOrmDropDb = `import db from '../models/setup';
db.query('drop database users', (err, result) => {
    if (err) {
        console.log("The Error", error);
    }
    console.log('Successfully dropped db')
}); `;

const createDb = `import { User } from '../models';
User.sync().then(() => {
    console.log("Successfully created User tables tables")
}).catch(error => {
    console.log("The error: ", error)
});
`;
const noOrmcreateDb = `import db from '../models/setup';
db.query('create database users', (err, result) => {
    if (err) {
        console.log("The Error", error);
    }
    console.log('Successfully dropped db')
}); `;

const envExample = `
TEST_DATABASE_URL = "postgres://localhost:5432/dbnameTest"
DATABASE_URL = "postgres://localhost:5432/dbname"
NODE_ENV = "development"
`;

const noOrmUserController = `import db from '../models/setup';
import { allUsersQuery, singleUserQuery, createUserQuery, updateUserQuery, deleteUserQuery } from '../scripts/queries';

const { query } = db;
export const getAllUsersController = (res) => {
    query(allUsersQuery, (err, result) => {
        if (err) {
            res.status(500).json({
                status: "500",
                Error: err
            })
        }
        res.status(200).json({
            status: '200',
            message: 'User retrieved succesfully',
            data: result.rows
        });
    });
}
export const getUserController = (req, res) => {
    query(singleUserQuery, (err, result) => {
        if (err) {
            return res.status(500).json({
                status: "500",
                Error: err
            })
        }
        return res.status(200).json({
            status: '200',
            message: 'User retrieved succesfully',
            data: result.rows
        });
    });
}
export const signupUserController = (req, res) => {
    await query(createUserQuery, async (err, result) => {
        res.status(201).json({
            data: result,
            status: 201,
            message: 'User successfully created',
            data: resss.rows[0],
        });
    })
}
export const signinUserController = (req, res) => { }
export const updateUserController = (req, res) => {
    query(updateUserQuery, (err, resut) => {
        if (err) {
            return res.status(500).json({
                status: 500,
                Error: err
            })
        }
        res.status(201).json({
            status: 201,
            message: 'Successfully updated user details',
            data: resut.rows[0],
        })
    });
}
export const deleteUserController = (req, res) => {
    query(deleteUserQuery, (err, result) => {
        res.status(201).json({
            data: result.rows,
            status: '201',
            message: 'User deleted successfully',
        })
        if (err) {
            res.status(500).json({
                status: 500,
                Error: err
            });
        }
    });
}

`;
const userQueries = `
export default (req, res) => {
    const deleteUserQuery = \`DELETE FROM users WHERE id=\${req.params.id\}\`;
    const updateUserQuery = \`UPDATE users SET' \${key\}=\${req.body[key]\} where id = '\${req.params.id\}'\`;
    const createUserQuery = \`INSERT INTO  users(
        firstname, lastname,username, email, phonenumber, address, isadmin, password) 
        VALUES(
            '\${req.body.firstname\}', 
            '\${req.body.lastname\}', 
            '\${req.body.username\}',
            '\${req.body.email}',
            '\${req.body.password\}')\`;
    const singleUserQuery = \`SELECT * from users where id='\${req.params.id\}'\`
    const allUsersQuery = 'SELECT * from users'
    return {
        allUsersQuery,
        singleUserQuery,
        createUserQuery,
        updateUserQuery,
        deleteUserQuery
    }
}
`
module.exports = {
    packageJson,
    gitIgnore,
    readMe,
    babel,
    appJs,
    appJsTest,
    userMiddleware,
    middleware,
    userRouter,
    routes,
    createDb,
    dropDb,
    envExample,
    noOrmDropDb,
    noOrmcreateDb,
    noSequelizeSetupData,
    noSequelizeUserModelData,
    noOrmUserController,
    userQueries
};
